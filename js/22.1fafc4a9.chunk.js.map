{"version":3,"sources":["pages/RoadAddress.js"],"names":["RoadAddress","props","dispatch","useDispatch","React","useState","address","setAddress","useEffect","locateActions","getMyCoordinateAX","imageActions","setMask","is_home","onComplete","data","logger","extraAddress","addressType","userSelectedType","bname","buildingName","roadAddress","jibunAddress","className","style","height"],"mappings":"mNA0DeA,UAhDK,SAACC,GACnB,IAAMC,EAAWC,cACjB,EAA8BC,IAAMC,SAAS,IAA7C,mBAAOC,EAAP,KAAgBC,EAAhB,KAmCA,OAXAH,IAAMI,WAAU,WACd,GAAgB,KAAZF,EACF,OAAO,KAETJ,EAASO,IAAcC,kBAAkBJ,MACxC,CAACJ,EAAUI,IAEdF,IAAMI,WAAU,WACdN,EAASS,IAAaC,SAAQ,MAC7B,IAGD,eAAC,IAAD,CAAaC,SAnCC,EAmCd,UACE,cAAC,IAAD,eAAYZ,IACZ,cAAC,IAAD,CACEa,WAnCiB,SAACC,GACtBC,YAAO,mBAAoBD,GACTA,EAAKT,QAAvB,IACIW,EAAe,GACM,MAArBF,EAAKG,aAAiD,MAA1BH,EAAKI,kBAChB,KAAfJ,EAAKK,QACPH,GAAgBF,EAAKK,OAEG,KAAtBL,EAAKM,eACPJ,GACmB,KAAjBA,EAAA,YAA2BF,EAAKM,cAAiBN,EAAKM,cAE1B,KAAjBJ,EAAA,YAA2BA,EAA3B,KAA6C,GAE5DV,EAAWQ,EAAKO,cACmB,MAA1BP,EAAKI,kBACdZ,EAAWQ,EAAKQ,eAoBdC,UAAU,YACVC,MAAO,CAAEC,OAAQ","file":"static/js/22.1fafc4a9.chunk.js","sourcesContent":["// 메인 페이지 내 주소 설정\nimport React from \"react\";\nimport DaumPostCode from \"react-daum-postcode\";\nimport { AddressGrid, PcSide } from \"../components\";\n\nimport { useDispatch } from \"react-redux\";\nimport { actionCreators as locateActions } from \"../redux/modules/loc\";\nimport { actionCreators as imageActions } from \"../redux/modules/image\";\nimport logger from \"../shared/Console\";\n\nconst RoadAddress = (props) => {\n  const dispatch = useDispatch();\n  const [address, setAddress] = React.useState(\"\");\n  const is_home = true;\n  // 주소 검색 후 클릭 시 실행되는 함수\n  // 고객의 선택에 따라 도로명주소, 지번 주소를 메인 화면 최상단 헤더에서 보여줄 예정\n  const handleComplete = (data) => {\n    logger(\"RoadAddress:16: \", data);\n    let fullAddress = data.address;\n    let extraAddress = \"\";\n    if (data.addressType === \"R\" && data.userSelectedType === \"R\") {\n      if (data.bname !== \"\") {\n        extraAddress += data.bname;\n      }\n      if (data.buildingName !== \"\") {\n        extraAddress +=\n          extraAddress !== \"\" ? `, ${data.buildingName}` : data.buildingName;\n      }\n      fullAddress += extraAddress !== \"\" ? ` (${extraAddress})` : \"\";\n\n      setAddress(data.roadAddress);\n    } else if (data.userSelectedType === \"J\") {\n      setAddress(data.jibunAddress);\n    }\n  };\n\n  React.useEffect(() => {\n    if (address === \"\") {\n      return null;\n    }\n    dispatch(locateActions.getMyCoordinateAX(address));\n  }, [dispatch, address]);\n\n  React.useEffect(() => {\n    dispatch(imageActions.setMask(false));\n  }, []);\n\n  return (\n    <AddressGrid is_home={is_home}>\n      <PcSide {...props} />\n      <DaumPostCode\n        onComplete={handleComplete}\n        className=\"post-code\"\n        style={{ height: \"90vh\" }}\n      />\n    </AddressGrid>\n  );\n};\nexport default RoadAddress;\n"],"sourceRoot":""}