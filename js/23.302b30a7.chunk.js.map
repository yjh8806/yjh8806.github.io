{"version":3,"sources":["pages/Search.js"],"names":["Search","props","color","theme","border","fontSize","dispatch","useDispatch","React","useState","food","setFood","recent","nearby","sort","setSort","search_list","useSelector","state","search","list","is_food","searchActions","getSearchListDB","Fragment","minHeight","margin","shape","height","is_flex4","width","padding","bg40","placeholder","size","base","value","_onChange","e","target","onSubmit","is_submit","style","marginTop","marginLeft","position","cursor","viewBox","fill","xmlns","onClick","food_check","cx","cy","r","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","is_flex2","small","bg80","bold2","flex","justify_content","brand100","bg60","bold","_onClick","length","maxWidth","ZeroImg","map","p","idx","key","post_id","SearchLogoImg","defaultProps","styled","div","isWebpSupported","webp","whatDoIeatWebp","png","whatDoIeat","Group182_3xWebp","Group182_3x"],"mappings":"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","file":"static/js/23.302b30a7.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Post, Header, PcSide } from '../components/';\nimport { Grid, Input, Text } from '../elements';\n\nimport { actionCreators as searchActions } from '../redux/modules/search';\n\nimport theme from '../styles/theme';\n\n// 이미지 \nimport { png } from \"../styles/img/index\"; \nimport { webp } from \"../styles/img/webp\"; \nimport {isWebpSupported} from 'react-image-webp/dist/utils';\n\nconst Search = (props) => {\n  const { color, border, fontSize } = theme;\n\n  const dispatch = useDispatch();\n  const [food, setFood] = React.useState('');\n  const [sort, setSort] = React.useState({\n    recent: true,\n    nearby: false,\n  });\n\n  // 검색된 post들 가져오기\n  let search_list = useSelector((state) => state.search.list);\n  // input에 검색어가 있는지 확인\n  const is_food = useSelector((state) => state.search.is_food);\n\n  const onChange = (e) => {\n    setFood(e.target.value);\n  };\n\n  // 정렬기준을 가지고 검색하기\n  const search = () => {\n    setSort({ ...{ sort: false }, recent: true });\n    dispatch(searchActions.getSearchListDB(food));\n  };\n\n  // 검색input 초기화\n  const foodReset = () => {\n    setFood('');\n    dispatch(searchActions.food_check(false));\n  };\n  \n  return (\n    <React.Fragment>\n      <PcSide {...props} />\n      <Grid\n        minHeight=\"100vh\"\n        margin=\"0 auto\"      \n      >\n        <Grid shape=\"container\">\n          <Header {...props} shape=\"검색\">\n            검색\n          </Header>\n          <Grid height=\"4.4rem\" />\n        </Grid>\n        <Grid is_flex4=\"t\" height=\"4.4rem\" margin=\"1.6rem auto 0 auto\">\n          <Grid width=\"32rem\" margin=\"auto\">\n            <Input\n              padding=\"1.4rem 8rem 1.4rem 1.6rem\"\n              border={border.bg40}\n              placeholder=\"제목+내용으로 검색 돼요.\"\n              size={fontSize.base}\n              value={food}\n              _onChange={onChange}\n              onSubmit={search}\n              is_submit\n            ></Input>\n          </Grid>\n\n          {food ? (\n            <svg\n              style={{\n                marginTop: '0.5rem',\n                marginLeft: '27.5rem',\n                fontSize: '1.9rem',\n                position: 'absolute',\n                cursor: 'pointer',\n              }}\n              width=\"2rem\"\n              height=\"2rem\"\n              viewBox=\"0 0 20 20\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              onClick={() => {\n                foodReset();\n              }}\n            >\n              <circle cx=\"10\" cy=\"10\" r=\"8\" fill=\"#CECAC7\" />\n              <path\n                d=\"M7.14307 7.14282L12.8574 12.8571\"\n                stroke=\"white\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n              />\n              <path\n                d=\"M7.14307 12.8572L12.8574 7.14289\"\n                stroke=\"white\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n              />\n            </svg>\n          ) : (\n            <></>\n          )}\n\n          <svg\n            style={{\n              marginTop: '0.5rem',\n              marginLeft: '30.5rem',\n              fontSize: '1.9rem',\n              position: 'absolute',\n              cursor: 'pointer',\n            }}\n            width=\"2.4rem\"\n            height=\"2.4rem\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            onClick={() => {\n              search();\n            }}\n          >\n            <circle cx=\"11\" cy=\"11\" r=\"6\" stroke=\"#36373C\" strokeWidth=\"2\" />\n            <path\n              d=\"M16 16C17.1716 17.1716 19 19 19 19\"\n              stroke=\"#36373C\"\n              strokeWidth=\"3\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n          </svg>\n        </Grid>\n        <Grid is_flex2 width=\"32rem\" margin=\"2.15rem auto\">\n          <Grid>\n            <Text size={fontSize.small} color={color.bg80} bold2=\"500\">\n              정렬 기준\n            </Text>\n          </Grid>\n          <Grid flex justify_content=\"flex-end\">\n            <Text\n              size={fontSize.small}\n              color={sort?.recent ? color.brand100 : color.bg60}\n              bold\n              cursor=\"t\"\n              _onClick={() => {\n                setSort({ ...{ sort: false }, recent: true });\n                dispatch(searchActions.getSearchListDB(food));\n              }}\n            >\n              마감임박순\n            </Text>\n            <Text\n              size={fontSize.small}\n              color={sort?.nearby ? color.brand100 : color.bg60}\n              bold\n              margin=\"0 0 0 1rem\"\n              cursor=\"t\"\n              _onClick={() => {\n                setSort({ ...{ sort: false }, nearby: true });\n                dispatch(searchActions.getSearchListDB(food, 'nearBy'));\n              }}\n            >\n              거리순\n            </Text>\n          </Grid>\n        </Grid>\n        {is_food ? (\n          <Grid>\n            {search_list.length === 0 ? (\n              <Grid maxWidth=\"30rem\" margin=\"5rem auto\">\n                <ZeroImg />\n              </Grid>\n            ) : (\n              <Grid>\n                {search_list.map((p, idx) => {\n                  return <Post {...p} key={p.post_id} />;\n                })}\n              </Grid>\n            )}\n          </Grid>\n        ) : (\n          <Grid maxWidth=\"30rem\" margin=\"5rem auto\">\n            <SearchLogoImg />\n          </Grid>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nSearch.defaultProps = {};\n\nconst SearchLogoImg = styled.div`\n  width: 28rem;\n  height: 25.8rem;\n  border-radius: 2rem;\n  background-image: url('${isWebpSupported() ? webp.whatDoIeatWebp : png.whatDoIeat}');\n  background-size: 28rem 25.8rem;\n  margin: 0 auto;\n`;\n\nconst ZeroImg = styled.div`\n  width: 14.3rem;\n  height: 26.4rem;\n  border-radius: 2rem;\n  background-image: url('${isWebpSupported() ? webp.Group182_3xWebp : png.Group182_3x}');\n  background-size: 14.3rem 26.4rem;\n  margin: 0 auto;\n`;\n\nexport default Search;\n"],"sourceRoot":""}